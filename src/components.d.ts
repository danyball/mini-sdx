/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface SdxTabs {
        /**
          * Disable animations for testing.
          * @private
         */
        "animated": boolean;
        /**
          * Callback that will fire when the active tab has changed. Provides the active tab DOM node.
          * @deprecated use sdxselect event instead.
         */
        "changeCallback"?: ((activeTab: Node) => void) | string;
        /**
          * Draws the layout. Useful to redraw the component when initially rendered on a hidden parent (e.g. an sdx-tabs-item).
         */
        "layout": () => Promise<void>;
        /**
          * Description text read by the screen reader.
         */
        "srHint": string;
        /**
          * Arranges the tabs appearance to be either left-aligned (default) or centralised.
         */
        "theme": "left-aligned" | "centered";
    }
    interface SdxTabsItem {
        /**
          * The tab is not selectable.
         */
        "disabled": boolean;
        /**
          * Renders anchor element instead of a button. Can be useful for deep linking, SEO, etc.
         */
        "href"?: string;
        /**
          * Title of the tab.
         */
        "label": string;
        /**
          * The tab is active.
         */
        "selected": boolean;
        /**
          * Callback that will fire when the tabs item has become visible. Also fires when opened by default.
          * @deprecated use sdxselect event instead.
         */
        "selectedCallback"?: (() => void) | string;
    }
}
export interface SdxTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSdxTabsElement;
}
export interface SdxTabsItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSdxTabsItemElement;
}
declare global {
    interface HTMLSdxTabsElement extends Components.SdxTabs, HTMLStencilElement {
    }
    var HTMLSdxTabsElement: {
        prototype: HTMLSdxTabsElement;
        new (): HTMLSdxTabsElement;
    };
    interface HTMLSdxTabsItemElement extends Components.SdxTabsItem, HTMLStencilElement {
    }
    var HTMLSdxTabsItemElement: {
        prototype: HTMLSdxTabsItemElement;
        new (): HTMLSdxTabsItemElement;
    };
    interface HTMLElementTagNameMap {
        "sdx-tabs": HTMLSdxTabsElement;
        "sdx-tabs-item": HTMLSdxTabsItemElement;
    }
}
declare namespace LocalJSX {
    interface SdxTabs {
        /**
          * Disable animations for testing.
          * @private
         */
        "animated"?: boolean;
        /**
          * Callback that will fire when the active tab has changed. Provides the active tab DOM node.
          * @deprecated use sdxselect event instead.
         */
        "changeCallback"?: ((activeTab: Node) => void) | string;
        /**
          * Emitted when an item becomes visible.
         */
        "onSdxselect"?: (event: SdxTabsCustomEvent<any>) => void;
        /**
          * Description text read by the screen reader.
         */
        "srHint"?: string;
        /**
          * Arranges the tabs appearance to be either left-aligned (default) or centralised.
         */
        "theme"?: "left-aligned" | "centered";
    }
    interface SdxTabsItem {
        /**
          * The tab is not selectable.
         */
        "disabled"?: boolean;
        /**
          * Renders anchor element instead of a button. Can be useful for deep linking, SEO, etc.
         */
        "href"?: string;
        /**
          * Title of the tab.
         */
        "label"?: string;
        /**
          * Emitted when the item becomes visible.
         */
        "onSdxselect"?: (event: SdxTabsItemCustomEvent<any>) => void;
        /**
          * The tab is active.
         */
        "selected"?: boolean;
        /**
          * Callback that will fire when the tabs item has become visible. Also fires when opened by default.
          * @deprecated use sdxselect event instead.
         */
        "selectedCallback"?: (() => void) | string;
    }
    interface IntrinsicElements {
        "sdx-tabs": SdxTabs;
        "sdx-tabs-item": SdxTabsItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "sdx-tabs": LocalJSX.SdxTabs & JSXBase.HTMLAttributes<HTMLSdxTabsElement>;
            "sdx-tabs-item": LocalJSX.SdxTabsItem & JSXBase.HTMLAttributes<HTMLSdxTabsItemElement>;
        }
    }
}
